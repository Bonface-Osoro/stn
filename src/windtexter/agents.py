import math 
import random
import numpy as np


class Site: # double spaces at vtghe end of class
    """
    This class represents a radio access point that handles the transmisssion and reception of the data.
    It represents the cell/Wi-fi base stations and also satellite.
    """
    def __init__(self,unique_id, site_type, attack_status):
        """Class constructor

        Args:
            unique_id (interger): Agent's unique identification information
            site_type (string): Types of the site (cellular, wi-fi or satellite)
            attack_status (interger): Whether the agent is attacked or not (0, 1 and 2 - normal, 
            attacked, compromised)
        """
        self.unique_id = unique_id
        self.site_type = site_type
        self.attack_status = attack_status
    
    def broadcast_details(self):
        """Provide basic details
        """
        print([self.unique_id, self.site_type, self.attack_status])


class SenderAgent:
    """
    This class represents a user sending and receiving data to and from the network.
    """
    def __init__(self, unique_id):
        """Class constructor

        Args:
            unique_id (interger): Agent's unique identification information
        """

        self.unique_id = unique_id
    
    def send_text(self):
        """The agent sends a text to the site.
        
        Returns
        -------
        text : array
            Array of 10 items consisting of 1s and 0s.
        """
        text = np.random.randint(0, 2, 100)

        return text


class InterceptorAgent:
    """
    This class represents a malcious user in the network who tries to decrypt, read and block 
    data transmission and reception.
    """
    def __init__(self, unique_id):
        """Class constructor

        Args:
            pos_x (float): Agent's x axis position
            pos_y (float): Agent's x axis position
            unique_id (interger): Agent's unique identification information
        """

        self.unique_id = unique_id
    
    def read_text(self):
        """The agent reads a text from the sender.
        
        Returns
        -------
        key_generate : array
            Array of 10 items consisting of 1s and 0s.
        """   
        key_generate = np.random.randint(0, 2, 100) # Generate a random 10 numbers (0s and 1s)
        # Assign the number generated by the sender

        return key_generate
    
    def decrypt_text(self, algorithm_key):
        """The agent decrypts the texts sent by the sender.
        Returns
        -------
        text : int
            Interger indicating the sum of 1s in a 100 elemnt array (message)    
        """
        sender_details = SenderAgent("r67rft") # Source senders details
        sender_msg = sender_details.send_text() # Display senders messages

        int_algorithm = sum(sender_msg[0:algorithm_key])  # Sum the first xx elements of the list
        int_details = InterceptorAgent("ytwt734") # Interceptor details
        int_code = int_details.read_text() # Interceptor generates a random code

        decryption_code = int_algorithm + sum(int_code)

        return decryption_code

if __name__ == "__main__":  
        
    x = InterceptorAgent("974378")
    y = x.decrypt_text(13)
    print(y)